@model STPC.DynamicForms.Web.Models.FormViewModel
@{
    ViewBag.Title = "Campos de panel";
  
}
<div id="migas">
    <p>Campos del panel: @Model.panel.Name</p>
</div>
@section BottomAssets {
    <script src="@Url.Content("~/Scripts/tinymce/tiny_mce_jquery.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/Panel/Edit.js")" type="text/javascript"></script>
    <script type="text/javascript">
        function ValidNum() {
            if (event.keyCode < 48 || event.keyCode > 57) {
                event.returnValue = false;
            }
        }

        //$(function () {
        //  $("#btnSave").click(function () {
        //    alert('aqui');        

        //    return RecorrerForm();        
        //  });
        //});

        function RecorrerForm()
        {
           
            alert('RecorrerForm');
            var sAux="";
            var frm = document.getElementById("frmData");

            var dict ="";

            for (i=0;i<frm.elements.length;i++)
            {
                var nombreCampo=frm.elements[i].name;
                var pos=nombreCampo.indexOf("FormFieldName");

                if (frm.elements[i].name.indexOf("FormFieldName") >= 0) {
                    alert('iguales');
                }

                if (pos>=0) {
                    alert('nombreCampo: '+nombreCampo);
                    alert('posicion: '+pos);

                    var valor=frm.elements[i].value;
                    //alert('valor: '+ valor);
        
                    var posValor=dict.indexOf(valor);
                    //alert('posValor: '+ posValor);

                    if (posValor>=0) {
                        alert('Existen nombres de campo repetidos, por favor corregir.');
                        return false;
                    }

                    else {
                        dict += dict +"," + valor;
                    }
                }
            }

            return true;
        }
    </script>
}
@using (Html.BeginForm("Edit", "Panel", FormMethod.Post, new { id = "frmData" }))
{
    <fieldset style="border-color: lightgray; border-style: solid; border-width: thin; padding: 5px 5px 5px 5px;">
        <legend></legend>
        <br />
        <h2>Nombre del panel</h2>
        @Html.TextBoxFor(form => form.panel.Name)
        @Html.ValidationMessageFor(form => form.panel.Name)
        <h2>Descripción</h2>
        @Html.TextBoxFor(form => form.panel.Description)
        @Html.ValidationMessageFor(form => form.panel.Description)
        @Html.HiddenFor(form => form.panel.Uid)
        @Html.Hidden("ListFields", (string)ViewBag.ListFields)
        @Html.Hidden("colunmNumber", (int)ViewBag.colunmNumber)
    </fieldset>
    <br />
  
    <div id="FormFieldList">
        @foreach (var formfield in Model.formfields)
        {
@*<hr />*@
            switch (formfield.ControlType)
            {
                case ("Generic"):
                    Html.RenderPartial("_Generic", formfield);
                    break;
                case ("StateImage"):
                    Html.RenderPartial("_StateImage", formfield);
                    break;
                case ("ChoiceList"):
                    Html.RenderPartial("_ChoiceList", formfield);
                    break;
                case ("SelectList"):
                    Html.RenderPartial("_SelectList", formfield);
                    break;
                case ("TextArea"):
                    Html.RenderPartial("_TextArea", formfield);
                    break;
                case ("CheckBox"):
                    Html.RenderPartial("_CheckBox", formfield);
                    break;
                case ("Literal"):
                    Html.RenderPartial("_Literal", formfield);
                    break;
                case ("FileUpload"):
                    Html.RenderPartial("_FileUpload", formfield);
                    break;
                case ("LHyperLink"):
                    Html.RenderPartial("_LHyperLink", formfield);
                    break;
                case ("Blank"):
                    Html.RenderPartial("_Blank", formfield);
                    break;
            }

        }
    </div>
    <h4>
        <a href="javascript:;" id="newFieldSelect" class="decoratedButton" style="display: none;">[+] Agregar un campo</a>
        <br />
    </h4>
    <div id="FieldType">
        <br />
        <fieldset style="border-color: lightgray; border-style: solid; border-width: thin; padding: 5px 5px 5px 5px;">
            <legend>Seleccione un tipo de campo </legend>
            <table>
                @*<tr>
          <th>Seleccione un tipo de campo</th>
        </tr>*@
                <tr>
                    <td>
                        <br />
                    </td>
                </tr>
                <tr>
                    <td>
                        @Html.DropDownList("FieldTypes", new SelectList(Model.formfields[0].FormFieldTypes, "Value", "Text"), new { id = "SelectedFieldUid" })
                        @Html.ActionLink("Agregar campo", "NewFormField", new { formId = ViewContext.FormContext.FormId, selectedFieldType = "SelectedFieldUid", panelUid = @Model.panel.Uid }, new { @id = "newFormField", @class = "decoratedButton" })
                        @Html.ValidationMessageFor(model => model.formfields)
                    </td>
                </tr>
            </table>
        </fieldset>
    </div>
    <p>
        <input type="submit" value="Guardar" id="btnSave" />
        @*<input type="button" value="Cancelar" class = "decorated"
                    onclick="confirmation('Seguro que quiere cancelar todos los cambios?', 
                    '@Url.Action("Edit", "FormPage", new { id = Model.panel.Page.Uid })  ');" />*@

        <input type="button" value="Cancelar" class = "decorated"
                    onclick="confirmation('Seguro que quiere cancelar todos los cambios?', 
                    '@Url.Action("GetColumns", "Panel", new { id = Model.panel.Uid })    ');" />
    </p>
}